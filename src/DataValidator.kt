data class DetectionStatisticsResults(val truePositive: Float, val trueNegative: Float, val falsePositive: Float, val falseNegative: Float)
data class ClassificationStatisticsResults(val trueMalware: Int, val trueMalwareType: Int, val falseMalwareType: Int, val trueGenuine: Int, val falseMalware: Int, val falseGenuine: Int)


class DataValidator {
    companion object {

        fun shuffleDetectionValidation(dataset: MutableSet<BaseApp>, type: Int, iteration: Int): DetectionStatisticsResults {
            var tp = 0f
            var tn = 0f
            var fp = 0f
            var fn = 0f
            for (i in 1..iteration) {
                println("iteration $i")
                val sets = DataLoader.createSets(dataset)
                val learner = DataLearner.MalwareLearner(sets.second)
                learner.learn(type)
                val ret = validateDetection(sets.first, learner)
                tp+=ret.truePositive
                tn+=ret.trueNegative
                fp+=ret.falsePositive
                fn+=ret.falseNegative
            }
            tp /= iteration
            tn /= iteration
            fp /= iteration
            fn /= iteration
            println("tp ${tp}")
            println("tn ${tn}")
            println("fp ${fp}")
            println("fn ${fn}")
            println("Precision ${(tp / (tp + fp))}")
            println("Recall ${(tp / (tp + fn))}")
            println("False positive rate ${(fp / (fp + tn))}")
            println("Accuracy ${((tp + tn) / (fp + tn + fn + fp))}")
            return DetectionStatisticsResults(tp/iteration, tn/iteration, fp/iteration, fn/iteration)
        }

        private fun validateDetection(set: List<BaseApp>, learner: DataLearner.MalwareLearner): DetectionStatisticsResults {
            return if (learner is DataLearner.MalwareLearner) validateMalwareDetection(set,learner) else return DetectionStatisticsResults(-1f, -1f, -1f, -1f)
        }

        fun validateClassification(set: List<BaseApp>, learner: DataLearner.MalwareLearner) : ClassificationStatisticsResults {
            return if (learner is DataLearner.MalwareLearner) validateMalwareClassification(set,learner) else return ClassificationStatisticsResults(-1,-1,-1,-1,-1, -1)
        }

        private fun validateMalwareDetection(set: List<BaseApp>, learner: DataLearner.MalwareLearner): DetectionStatisticsResults {
            var tp = 0
            var tn = 0
            var fp = 0
            var fn = 0
            for (element in set) {
                val result = learner.classify(element)
                if (result != "genuine" && element.isMalware) tp++
                else if (result == "genuine" && element.isMalware) fn++
                else if (result != "genuine" && !element.isMalware) fp++
                else if (result == "genuine" && !element.isMalware) tn++
            }
            return DetectionStatisticsResults(tp.toFloat(), tn.toFloat(), fp.toFloat(), fn.toFloat())
        }

        private fun validateMalwareClassification(set: List<BaseApp>,learner: DataLearner.MalwareLearner): ClassificationStatisticsResults {
            var trueMalwareType = 0
            var falseMalwareType = 0
            var trueGenuine = 0
            var trueMalware = 0
            var falseGenuine = 0
            var falseMalware = 0
            for (element in set) {
                val result = learner.classify(element)
                if (result != "genuine" && element.isMalware) {
                    trueMalware++
                    if (result == element.type) trueMalwareType++
                    else falseMalwareType++
                }
                else if (result == "genuine" && element.isMalware) falseGenuine++
                else if (result != "genuine" && !element.isMalware) falseMalware++
                else if (result == "genuine" && !element.isMalware) trueGenuine++
            }
            println("trueMalware ${trueMalware}")
            println("trueMalwareType ${trueMalwareType}")
            println("falseMalwareType ${falseMalwareType}")
            println("trueGenuine ${trueGenuine}")
            println("falseMalware ${falseMalware}")
            println("falseGenuine ${falseGenuine}")
            return ClassificationStatisticsResults(trueMalware, trueMalwareType, falseMalwareType, trueGenuine, falseMalware, falseGenuine)
        }
    }


}