data class StatisticsResults(val truePositive: Int, val trueNegative: Int, val falsePositive: Int, val falseNegative: Int)

class DataValidator(val set:List<BaseApp>, private val learner: DataLearner.MalwareLearner) {
    fun validate () : StatisticsResults {
        return if (learner is DataLearner.MalwareLearner) validateApp() else return StatisticsResults(-1,-1,-1,-1)
    }

    fun validateApp() : StatisticsResults{
        var tp = 0
        var tn = 0
        var fp = 0
        var fn = 0
        for (element in set) {
            val result = learner.classify(element)
            if (result && element.isMalware) tp++
            else if (!result && element.isMalware) fn++
            else if (result && !element.isMalware) fp++
            else if (!result && !element.isMalware) tn++
        }
        println("tp ${tp}")
        println("tn ${tn}")
        println("fp ${fp}")
        println("fn ${fn}")
        println("Precision ${(tp.toFloat() /(tp+fp).toFloat())}")
        println("Recall ${(tp.toFloat()/(tp+fn).toFloat())}")
        println("False positive rate ${(fp.toFloat()/(fp+tn).toFloat())}")
        println("Accuracy ${((tp+tn).toFloat()/(fp+tn+fn+fp).toFloat())}")
        return StatisticsResults(tp,tn,fp,fn)
    }

}