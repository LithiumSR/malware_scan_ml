import java.io.File
import java.util.*
import kotlin.collections.HashMap

data class BaseApp(val isMalware: Boolean, val type: String, val features: Map<String, List<String>>)

class DataLoader {

    companion object {

        fun loadApps(folderDataset: String, subclasses: Boolean, exceptions : List<String>) : MutableSet<BaseApp> {
            val set : MutableSet<BaseApp> = HashSet()
            val folder = File("$folderDataset/feature_vectors")
            val malwareMap:MutableMap<String, String> = HashMap()
            val malwaresSHA = File("$folderDataset/sha256_family.csv")
            var firstLine = true
            malwaresSHA.forEachLine {
                if (!firstLine) {
                    val split = it.split(",", limit = 2)
                    malwareMap[split[0]] = split[1]
                }
                else firstLine = false
            }
            folder.listFiles().forEach { it ->
                val map : MutableMap<String, MutableList<String>> = HashMap()
                it.forEachLine {
                    val split = it.split("::", limit = 2)
                    if (it.isEmpty() || split[0] in exceptions) return@forEachLine
                    if (map.containsKey(split[0])) {
                        val list = map[split[0]]
                        list!!.add(split[1])
                        map[split[0]] = list
                    }
                    else {
                        val list: MutableList<String> = LinkedList()
                        list.add(split[1])
                        map[split[0]] = list
                    }
                }
                val isMalware = malwareMap.containsKey(it.name)
                set.add(BaseApp(isMalware,if (isMalware && !subclasses) "malware" else if (isMalware && subclasses) malwareMap[it.name].toString() else "genuine", map))
            }
            println(set)
            return set
        }

        fun createSets(dataset:MutableSet<BaseApp>): Pair<List<BaseApp>, List<BaseApp>> {
            val datasetShuffled = dataset.shuffled()
            val sizeValidation = dataset.size/3
            val validation = datasetShuffled.subList(0,sizeValidation)
            val training = datasetShuffled.subtract(validation)
            return Pair(validation,training.toList())
        }
    }

}